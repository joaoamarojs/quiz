#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const UserManager = require('../services/users');
const Perguntas = require('../services/perguntas');
var debug = require('debug')('quiz:server');
var http = require('http');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);
var userManager = new UserManager();
var perguntas = new Perguntas();

io.on('connection', (socket) => {
  socket.on('result', (res) => {
    let user = userManager.getUserById(res.userId);
    let pergunta = perguntas.getPergunta(res.perguntaId);
    if(res.resposta != pergunta.resposta){
      result = false;
    }else{
      result = true;
      userManager.setUserScoreById(user.id,(user.score+1));
      io.emit('greetings', {ranking: userManager.getAllNamesAndScores()});
    }
    user.socket.emit('result', {resposta:result});
    if(res.respondidas.length < 10){
      user.socket.emit('response', perguntas.getPerguntaAleatoria(res.respondidas));
    }else{
      user.socket.emit('final', {name:user.name,score:user.score});
    }
  });
  socket.on('registrar', function(res) {
    let userNovo = userManager.addUser(res.nome, 0,socket);
    console.log('User registered:', userNovo.id);
    userNovo.socket.emit('registrar', {id: userNovo.id, nome:userNovo.name});
    userNovo.socket.emit('response', perguntas.getPerguntaAleatoria([]));
    io.emit('greetings', {ranking: userManager.getAllNamesAndScores()});
  });
  socket.on('disconnect', () => {
    
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
